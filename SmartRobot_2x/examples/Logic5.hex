
#smartRobot[move, up, 0]{b, 10}[Wup:] v
	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- canMoveUp, canMoveDown, canMoveLeft, canMoveRight, numberOfTimes(Wup, Wdown, Wleft, Wright).


#smartRobot[move, up, 0]{b, 10}[Wup:] v
	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] :- canMoveUp, canMoveDown, canMoveLeft, not canMoveRight, numberOfTimes(Wup, Wdown, Wleft, _).

#smartRobot[move, up, 0]{b, 10}[Wup:] v
	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- canMoveUp, canMoveDown, not canMoveLeft, canMoveRight, numberOfTimes(Wup, Wdown, _, Wright).

#smartRobot[move, up, 0]{b, 10}[Wup:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- canMoveUp, not canMoveDown, canMoveLeft, canMoveRight, numberOfTimes(Wup, _, Wleft, Wright).

	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- not canMoveUp, canMoveDown, canMoveLeft, canMoveRight, numberOfTimes(_, Wdown, Wleft, Wright).


#smartRobot[move, up, 0]{b, 10}[Wup:] v
	#smartRobot[move, down, 0]{b, 10}[Wdown:] :- canMoveUp, canMoveDown, not canMoveLeft, not canMoveRight, numberOfTimes(Wup, Wdown, _, _).

#smartRobot[move, up, 0]{b, 10}[Wup:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] :- canMoveUp, not canMoveDown, canMoveLeft, not canMoveRight, numberOfTimes(Wup, _, Wleft, _).

#smartRobot[move, up, 0]{b, 10}[Wup:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- canMoveUp, not canMoveDown, not canMoveLeft, canMoveRight, numberOfTimes(Wup, _, _, Wright).

	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
		#smartRobot[move, left, 0]{b, 10}[Wleft:] :- not canMoveUp, canMoveDown, canMoveLeft, not canMoveRight, numberOfTimes(_, Wdown, Wleft, _).

	#smartRobot[move, down, 0]{b, 10}[Wdown:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- not canMoveUp, canMoveDown, not canMoveLeft, canMoveRight, numberOfTimes(_, Wdown, _, Wright).

		#smartRobot[move, left, 0]{b, 10}[Wleft:] v
			#smartRobot[move, right, 0]{b, 10}[Wright:] :- not canMoveUp, not canMoveDown, canMoveLeft, canMoveRight, numberOfTimes(_, _, Wleft, Wright).


#smartRobot[move, up, 0]{b, 10} :- canMoveUp, not canMoveDown, not canMoveLeft, not canMoveRight.

	#smartRobot[move, down, 0]{b, 10} :- not canMoveUp, canMoveDown, not canMoveLeft, not canMoveRight.

		#smartRobot[move, left, 0]{b, 10} :- not canMoveUp, not canMoveDown, canMoveLeft, not canMoveRight.

			#smartRobot[move, right, 0]{b, 10} :- not canMoveUp, not canMoveDown, not canMoveLeft, canMoveRight.



current_position(R, C) :- &getPosition[](R, C), not firstExecution, not &foundTreasure[]().

numberOfTimes(Up, Down, Left, Right) :- &getNumberOfTimes[](Up, Down, Left, Right).

canMoveUp :- current_position(R, C), R != 0, not wall(R_m_1, C), R = R_m_1 + 1, row(R_m_1).
canMoveDown :- current_position(R, C), Rs = Rs_m_1 + 1, R != Rs_m_1, rows(Rs), row(Rs_m_1), not wall(R_p_1, C), R_p_1 = R + 1, row(R_p_1).
canMoveLeft :- current_position(R, C), C != 0, not wall(R, C_m_1), C = C_m_1 + 1, column(C_m_1).
canMoveRight :- current_position(R, C), Cs = Cs_m_1 + 1, C != Cs_m_1, columns(Cs), column(Cs_m_1), not wall(R, C_p_1), C_p_1 = C + 1, column(C_p_1).

#acthexNumberIterations=0.

#acthexStop{b} :- &foundTreasure[]().

#acthexStop{b} :- &exploredTheWholeMaze[]().

#smartRobot[printMazeDetectedByTheRobot, 0, 0]{b, 10} :- &foundTreasure[]().

#smartRobot[printMazeDetectedByTheRobot, 0, 0]{b, 10} :- &exploredTheWholeMaze[]().
